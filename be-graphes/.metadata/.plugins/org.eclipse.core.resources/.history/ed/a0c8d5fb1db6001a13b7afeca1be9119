package org.insa.graphs.algorithm.shortestpath;

import static org.junit.Assert.*;
import org.insa.graphs.algorithm.AbstractInputData.Mode;
import org.junit.Test;

public class PerformanceDijkstraAStar {

	@Test
	public void testPerformance() throws Exception {
		final String cheminVersMaps ="/Users/Alexandre/Desktop/3eme Annee MIC/Graphes-et-Algorithmes/Maps/";
		
		String mapName;
		int nbSommets;
		
		System.out.println("Test de performance entre Dijkstra et Dijkstra A*");

		
		// TEST 1 MAP = Toulouse : Length
		mapName = "toulouse.mapgr";
		nbSommets=39857;
		executeTwentyTestOnAMap(cheminVersMaps,mapName,nbSommets,Mode.LENGTH);
		System.out.println("FIN TEST N°1");
		Thread.sleep(2000);
		
		// TEST 2 MAP = Bordeaux : TIME
		mapName = "bordeaux.mapgr";
		nbSommets=15322;
		executeTwentyTestOnAMap(cheminVersMaps,mapName,nbSommets,Mode.TIME);
		System.out.println("FIN TEST N°2");
		Thread.sleep(2000);
		
		// TEST 3 MAP = Paris : LENGTH
		mapName = "paris.mapgr";
		nbSommets=48432;
		executeTwentyTestOnAMap(cheminVersMaps,mapName,nbSommets,Mode.TIME);
		System.out.println("FIN TEST N°3");
		Thread.sleep(2000);
		
		// TEST 4 MAP = Paris : TIME
		mapName = "paris.mapgr";
		nbSommets=48432;
		executeTwentyTestOnAMap(cheminVersMaps,mapName,nbSommets,Mode.TIME);
		System.out.println("FIN TEST N°4");
		System.out.println("FIN");
	}
	
	public void executeTwentyTestOnAMap(String cheminVersMaps,String mapName,int nbSommets,Mode modeTest) throws Exception {
	// Constante(s)
		
		
		// Variables
  		int origin,destination;
  		long startTime,endTime,timeElapsedD,timeElapsedDAStar;
  		
  		// Initialisation des classes de tests
  		solutionDijkstraTest soluceDijkstra=new solutionDijkstraTest();
  		solutionDijkstraAStarTest soluceDijkstraAStar=new solutionDijkstraAStarTest();
  		
  		
		

		//-- TEST -- 20 executions de l'algorithme 
		timeElapsedD=0;
		timeElapsedDAStar=0;
		System.out.println("20 executions des algorithmes sur la carte : "+mapName+" en mode : "+modeTest.toString());
		
		int Max=nbSommets;// Nombre de sommets dans toulouse.mapgr
		
		for(int i=0;i<20;i++) {
			// Initialisation d'une origine et destination aléatoire
			origin=(int)(Math.random() * (Max  + 1));
			destination=(int)(Math.random() * (Max + 1));
			
			// Dijkstra classique
			startTime=System.nanoTime();
			soluceDijkstra.execute(cheminVersMaps+mapName,origin,destination,modeTest);
			endTime=System.nanoTime();
			timeElapsedD+=endTime-startTime;
			System.out.println("Dijkstra = "+timeElapsedD);

			System.out.println("\n");
			// AStar
			startTime=System.nanoTime();
			soluceDijkstraAStar.execute(cheminVersMaps+mapName,origin,destination,modeTest);
			endTime=System.nanoTime();
			timeElapsedDAStar+=endTime-startTime;
			System.out.println("AStar = "+timeElapsedDAStar);
		}
		double moyD=timeElapsedD/1000000000.0;// /1000000000 pour avoir le temps en seconde
		double moyDAStar=timeElapsedDAStar/1000000000.0;// /1000000000 pour avoir le temps en seconde
		System.out.println("Temps d'execution de Dijkstra en seconde = "+moyD);
		System.out.println("Temps d'execution de Dijkstra A Star en seconde = "+moyDAStar);
		System.out.println("Sur ces 20 executions Dijkstra A Star est "+(double)moyD/moyDAStar+" fois meilleur que l'algorithme classique");
		assertTrue(timeElapsedD > timeElapsedDAStar);

	}

}
